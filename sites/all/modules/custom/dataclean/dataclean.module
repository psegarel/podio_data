<?php

function dataclean_preprocess_page(&$variables)
{	
	$contact_types = variable_get('contact_types');

	if(!$contact_types){
		$contact_types = _dataclean_get_vocabulary_terms('contact_type');
		variable_set('contact_types' , $contact_types );
	}
	
	/**
	* Imports the City databases
	* --------------------------
	*/
	$city_databases = array();
		
	// Dongguan
	$args = array( 	'type' 				=> 'city',
					'city'				=> 'Dongguan',
					'excel_file_path'	=> 'sites/default/files/excel/Dongguan.xlsx',
					'contact_types' 	=> $contact_types,
					'update'			=> FALSE ) ;
					
	$args['db_name'] = 	strtolower($args['city']).'_db';	
	$city_databases[] = $args;
		
	
    // Imports the records into Drupal
	foreach($city_databases as $city){
		
		$records = dataclean_import_excel_data($city);
			
		// Save all records
		if($records){
			_dataclean_save_records($records , $city , $city['update'] );
		}
	}
}

function _dataclean_save_records($records , $arguments , $update )
{	
	$nodes = variable_get($arguments['db_name']);
	dsm($nodes);
	
	if($update || empty($nodes) ){
		if(!empty($nodes) ){

			drupal_set_message('Let\'s update those nodes then!' , 'status');
		
			foreach($nodes as $node){
				if(isset($node)){
			  	  	node_delete($node->nid); 
				}
			} 
			drupal_set_message('Nodes already exist', 'status');	  
			// Easier to erase the previous records, then save again...
			variable_del($arguments['db_name']);
			
		}

		drupal_set_message('Nodes don\'t exist yet', 'status');
		// Record the saved nodes
		$saved = array();

		foreach($records as $node){			
			node_object_prepare($node);
			node_save($node);	

			if(isset($node->nid)){
				$saved[] = $node;
			}					
		} 	
		// Records the saved nodes ids in a variable
		if(!empty($saved)){
			variable_set($arguments['db_name'], $saved ); 
		}		
	}
}


function dataclean_import_excel_data($arguments) 
{
  module_load_include('inc', 'phpexcel');
  
  // The path to the excel file
  $path = $arguments['excel_file_path'];
  
  // The types of Contacts
  $contact_types = $arguments['contact_types'];
  
	/** The phpexcel_import() function can take two optional parameters.
	The second defaults to TRUE. If TRUE, the first row (headers) will be ignored and each row's cells will be keyed with the header value. If FALSE, the entire data array will be non-associative, and the first row (headers) will be present as well.
 
	The third defaults to FALSE. If TRUE, the first level of the data keys will be the Worksheet names. If FALSE, the keys will be numerical. 
	*/  
  $result = phpexcel_import($path , FALSE , TRUE );

  if($result['Database']){
	  
	  $database = $result['Database'];
	  // Removes the first row
	  unset($database[0]);
	  
	  // Removes the headers
	  unset($database[1]);
	  
	  $records = array();

	  foreach($database as $row)
	  {
	  		  $record = new stdClass();
	  		  $record->field_business_name['und'][0]['value'] = $row[0]; //business name
	  		  $record->field_db_contact['und'][0]['value'] = _dataclean_get_db_contact($row[1]); // db friend
			  
			  // English name
			  // Also assigns a Contact type term, depending on the English name
			  // If there is a business name but no English name, we assume it's a company
			  _dataclean_get_contact_name($record, $row[3] , $contact_types );// english name
			   		 
	  		  $record->field_job['und'][0]['value'] = $row[5]; // job
	  		  $record->field_city['und'][0]['value'] = $row[10]; // city
	  		  
			  //Sales & Distribution
			  _dataclean_get_sd($record , $row[2]);
	  		  
	  		  $record->field_chinese_name['und'][0]['value'] = $row[4]; // chinese name
			  
			  // Email
			  _dataclean_get_email($record, $row[6]);
			  
	  		  $record->field_mobile_phone['und'][0]['value'] = $row[7]; // mobile
	  		  $record->field_landline['und'][0]['value'] = $row[8]; // phone
	  		  $record->field_website['und'][0]['value'] = $row[9]; // website
	  		  $record->field_district['und'][0]['value'] = $row[11]; // district
	  		  $record->field_address['und'][0]['value'] = $row[12]; // english address
	  		  $record->field_chinese_address['und'][0]['value'] = $row[13]; // chinese address
	  		  
	  		  $record->type = 'contact';
	  		  
			  // Don't add empty rows to the records
			  if(isset($record->title)){
  	 		  	$records[] = $record;
			  }
	  }
	  
	  if(!empty($records)){
		  return $records;		  
	  }
  }else{
	drupal_set_message('The database couldn\'t not be imported', 'error');
  }
}

function _dataclean_get_email($record, $value)
{
	// Remove all hyperlinks, mailto etc...
	$search = array('@HYPERLINK@', '@mailto:@', '@"@', '@=@', '/\(|\)/');
	$value = preg_replace($search, '', $value);
	
	// Cleans QQ contacts, tramsform them to email & store the QQ contact value
	$isQQ = _dataclean_qqToEmail($record, $value);

	// If it wasn't a QQ contact
	if(!$isQQ){
		if($value){
			// More than one email?
			$pos = strpos( $value, '/');
			if($pos){
				$emails = explode('/' , $value);
			}
			$pos = strpos( $value, ',');
			if($pos){
				$emails = explode(',' , $value);
			}
			
			if(isset($emails)){
				
				// We need to clean up because we've created duplicate when removing the hyperlinks
				$clean = array();
				foreach($emails as $id=>$text){
					$isEmail = strpos($text , '@');
					if($isEmail){
						$email = strtolower(trim($text));
						if(!in_array($email, $clean )){
							$clean[] = $email;
						}
					}
				}
				
				foreach($clean as $e){
					$record->field_email['und'][] = array('value' => $e);
				}
				
			}else{
				$email = strtolower(trim($value));
			}
		}		
	}
}

function _dataclean_qqToEmail($record, $value)
{
	$qq = strpos($value, 'qq');
	if($qq === 0){ //if qq is at the beginning of the text, then it's not an email address
		$value = preg_replace('/[^0-9]/' , '', $value);
		$email = $value.'@qq.com';
		
		$record->field_email['und'][0]['value'] = $email;
		$record->field_qq['und'][0]['value'] = $value;
		
	}else{
		return FALSE;
	}
}

function _dataclean_get_sd($record , $tag)
{
  switch($tag) // Sales & Distribution
  {
  	  case 'D':
	  	$record->field_sales['und'][0]['value'] = 0;
	  	$record->field_distribution['und'][0]['value'] = 1;
	  	break;
		
  	  case 'S':
	  	$record->field_sales['und'][0]['value'] = 0;
	  	$record->field_distribution['und'][0]['value'] = 1;
	  	break;
  	  				
  	  case 'SD':
	  	$record->field_sales['und'][0]['value'] = 1;
	  	$record->field_distribution['und'][0]['value'] = 1;
	  	break;
  	  				
  	  default:
	  	$record->field_sales['und'][0]['value'] = 0;
	  	$record->field_distribution['und'][0]['value'] = 0;
  }
}

function _dataclean_get_contact_name($record , $name , $contact_types )
{	
	// Is there a Mr or Ms
	$pos = strpos($name, 'Mr'); //It's a guy
	if($pos === 0){
		$record->field_gender['und'][0]['value'] = 'Male';
		$record->field_contact_type['und'][0]['tid'] = $contact_types['Individual'];
		
		$search = array('@Mr@', '@\.@');
		$name = trim(preg_replace($search, '', $name));
		$space = strpos($name, ' ');
		
		if($space){ //Is there a space in the name, is there a first name...
			$names = explode(' ', $name);  
			$record->field_last_name['und'][0]['value'] = array_pop($names);
  			$record->field_first_name['und'][0]['value'] = implode(' ', $names);
			$record->title = $record->field_first_name['und'][0]['value'].' '.$record->field_last_name['und'][0]['value'];	
		}else{
			$record->field_last_name['und'][0]['value'] = $name;
			$record->title = 'Mr '.$name;
		}
		
	}else{
		
		$pos = strpos($name, 'Ms'); //It's a girl
		if($pos === 0){
			$record->field_gender['und'][0]['value'] = 'Female';
			$record->field_contact_type['und'][0]['tid'] = $contact_types['Individual'];
			
			$search = array('@Ms@', '@\.@');
			$name = trim(preg_replace($search, '', $name));
			$space = strpos($name, ' ');
		
			if($space){
				$names = explode(' ', $name);  
				$record->field_last_name['und'][0]['value'] = array_pop($names);
	  			$record->field_first_name['und'][0]['value'] = implode(' ', $names);
				$record->title = $record->field_first_name['und'][0]['value'].' '.$record->field_last_name['und'][0]['value'];	
			}else{
				$record->field_last_name['und'][0]['value'] = $name;
				$record->title = 'Ms '.$name;
			}
		}else{
			if($name){
				$name = trim($name);
				$space = strpos($name , ' ');
				
				if($space){ //Is there a space in the name, is there a first name...
					$names = explode(' ', $name);
					$record->field_last_name['und'][0]['value'] = array_pop($names);
	  				$record->field_first_name['und'][0]['value'] = implode(' ', $names);
					$record->title = $record->field_first_name['und'][0]['value'].' '.$record->field_last_name['und'][0]['value'];
					
				}else{
					$record->title = $record->field_first_name['und'][0]['value'] = $name;
				}
				
				$record->field_contact_type['und'][0]['tid'] = $contact_types['Individual'];
				
			}else{ // If there's no individual name
				if($record->field_business_name['und'][0]['value']){ // but there is a Business Name
					$record->title = $record->field_business_name['und'][0]['value'];
					
					// I assume it's a business
					$record->field_contact_type['und'][0]['tid'] = $contact_types['Business'];
				}
			}
		}			
	}
}

function _dataclean_get_db_contact($name)
{
	switch($name)
	{
		case 'E':
			$name = 'Edison';
			break;

		case 'E+T':
		case 'T+E':
			$name = 'Edison';
			break;
			
		case 'JO':
			$name = 'Joanna';
			break;			
			
		case 'T':
			$name = 'Tracy';
			break;
			
		case 'V':
			$name = 'Virginia';
			break;
	}
	
	return $name;
}

function _dataclean_get_vocabulary_terms($vocabulary_name)
{
	$vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
	
	if($vocabulary){
		$tree = taxonomy_get_tree($vocabulary->vid);
		
		if($tree){
			$terms = array();
		
			foreach($tree as $term)
			{
				$terms[$term->name] = $term->tid;
			}
		}
		
		return $terms;
		
	}else{
		
		drupal_set_message('The '.$vocabulary_name.' vocabulary couldn\'t be found', 'error');
		return FALSE;
	}
}
